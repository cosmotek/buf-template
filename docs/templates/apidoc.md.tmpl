<!-- Code generated by protoc-gen-gotemplate -->
{{- $pkg := .File.Name | dir}}

{{- $file := .File}}
{{- $currentFile := $file.Name | getProtoFile}}

# {{.Service.Name}} API Service
[gRPC Package {{.File.Name | dir}}](PROJECT_URL/{{ .File.Name }})

{{leadingComment .Service}}
{{- $serviceName := .Service.Name }}

## API Methods
{{- range .Service.Method}}
### RPC {{$pkg | replace "/" "." }}.{{$serviceName}}/{{.Name}}

{{- $in := .InputType | getMessageType $file}}
{{- $out := .OutputType | getMessageType $file}}

{{- if .ClientStreaming}}
**Notice**: This RPC method is incompatible with web browsers and other clients lacking support for client-side streaming.
{{- end}}

{{leadingComment .}}

**Input Type: {{if .ClientStreaming}}steam {{end}}{{$in.Name}}**
| FieldName | FieldIndex | FieldType | TypeName | JsonFieldName | GoType | JsType |
| ----------- | ----------- | ---------- | ---------- | --------- | -------- | -------- |
{{- range $out.Field}}
| {{.Name}} | {{.Number}} | {{.Type}} | {{.TypeName}} | {{.JsonName}} | {{goTypeWithPackage .}} | {{replace "$" "/" (jsType .)}} |
{{- end}}

**Return Type: {{if .ServerStreaming}}steam {{end}}{{$out.Name}}**
| FieldName | FieldIndex | FieldType | TypeName | JsonFieldName | GoType | JsType |
| ----------- | ----------- | ---------- | ---------- | --------- | -------- | -------- |
{{- range $out.Field}}
| {{.Name}} | {{.Number}} | {{.Type}} | {{.TypeName}} | {{.JsonName}} | {{goTypeWithPackage .}} | {{replace "$" "/" (jsType .)}} |
{{- end}}

gRPCurl Example:
```sh
grpcurl -plaintext -d @ <host:port> {{$pkg | replace "/" "." }}.{{$serviceName}}/{{.Name}} <<EOM
{

{{- range $in.Field}}
    {{- if eq (.Type | toString) "TYPE_MESSAGE" }}
    {{- $subType := .TypeName | getMessageType $file }}
    "{{.JsonName}}": {
        {{- range $subType.Field}}
        {{- if eq (.Type | toString) "TYPE_MESSAGE" }}
        {{- $subTypeB := .TypeName | getMessageType $file }}
        "{{.JsonName}}": {
            {{- range $subTypeB.Field}}
            {{- if eq (.Type | toString) "TYPE_MESSAGE" }}
            {{- $subTypeC := .TypeName | getMessageType $file }}
            "{{.JsonName}}": {
                {{- range $subTypeC.Field}}
                "{{.JsonName}}": {{- if eq (.Type | toString) "TYPE_MESSAGE" }}{...({{.TypeName}})}{{else}}{{goZeroValue .}}{{end}},
                {{- end}}
            },
            {{- else }}
            "{{.JsonName}}": {{goZeroValue .}},
            {{- end}}
            {{- end}}
        },
        {{- else }}
        "{{.JsonName}}": {{goZeroValue .}},
        {{- end}}
        {{- end}}
    },
    {{- else }}
    "{{.JsonName}}": {{goZeroValue .}},
    {{- end }}
{{- end}}
}
EOM
```
{{end}}
